?value: func    
      | set     
      | scal    

// EXPESSIONS THAT INVOLVE MATHEMATICAL FUNCTIONS
//
func: func_def
    | func_expr 
    | func_name
    | func_composed

func_def: func_names COLON mapping
mapping: set TO set
func_names: func_name | func_enumeration
func_enumeration: func_name COMMA func_name [(COMMA func_name)*]
func_composed: func_name OP_FUNC_COMP func_name (OP_FUNC_COMP func_name)*
func_name: letter | FUNC_NORMAL

func_expr: func_name_arg EQUAL expr 
func_name_arg: func_name L_PAREN func_arg R_PAREN
func_arg: lower_letter 
        | signed_number 
        | ( func_arg COMMA func_arg [(COMMA func_arg)*] )


// EXPRESSION
//
scal: expr
expr:  additive 
additive: (additive (ADD | SUB) additive) | mp

mp: mp (MUL | CMD_TIMES | CMD_CDOT | DIV | CMD_DIV | COLON) mp 
  | unary

unary: (ADD | SUB) unary | postfix+ 

postfix: exp postfix_op*  

postfix_op: BANG | eval_at

eval_at: BAR (eval_at_sup | eval_at_sub | eval_at_sup eval_at_sub)

eval_at_sub: UNDERSCORE L_BRACE (expr | equality) R_BRACE
eval_at_sup: CARET L_BRACE (expr | equality) R_BRACE

equality: expr EQUAL expr

exp: exp CARET (expr_atom | L_BRACE expr R_BRACE) subexpr? | comp

subexpr: UNDERSCORE (expr_atom | L_BRACE expr R_BRACE)

comp: expr_atom 
    | group

expr_atom: lower_letter 
         | signed_number
         | frac 
         | binom

frac: CMD_FRAC (L_BRACE expr R_BRACE) (L_BRACE expr R_BRACE)
    | (expr DIV expr)

binom: (CMD_BINOM | CMD_DBINOM | CMD_TBINOM) ( L_BRACE expr R_BRACE ) (L_BRACE expr R_BRACE)

// EXPRESSIONS THAT INVOLVE MATHEMATICAL SETS
//
set: explset 
   | set_expr 
   | interval
   | set_constant

complexset: upper_letter | integer ["^"][upper_letter | integer]
explset: L_BRACE_LITERAL ([set_enumeration] | item) R_BRACE_LITERAL

set_expr: (set_expr (set_operator_set|op_to_set_pow) set_expr) ((set_operator_set|op_to_set_pow) set_expr)*
         | (L_PAREN set_expr R_PAREN ) 
         | (integer op_to_set_pow set_expr) | (set_expr op_to_set_pow integer)
         | set_constant_custom
         | set_atom 
set_enumeration: enumeration
set_atom: upper_letter | set_constant
set_constant_custom: [SET_FAT] upper_letter [CARET (expr_atom | L_BRACE expr R_BRACE) subexpr? | comp]

interval: (L_BRACKET | L_PAREN) expr_atom COMMA expr_atom (R_BRACKET | R_PAREN)


// enumerations 
enumeration: item COMMA item [(COMMA item)*]

group: (L_PAREN expr R_PAREN)
     | (L_BRACKET expr R_BRACKET)
     | (L_BRACE expr R_BRACE)
     | (L_BRACE_LITERAL expr R_BRACE_LITERAL)


item:  letter
     | signed_number
     | set_constant 

ADD: "+"
SUB: "-"
MUL: "*"
DIV: "/"
BANG: "!"
BAR: "|"
CARET: "^"
UNDERSCORE: "_"

OP_FUNC_COMP: "\\circ"

EQUAL: "="
TO: "\\to" | "\\rightarrow"
COMMA: ","
COLON: ":" | "\\colon"

L_PAREN: "("
R_PAREN: ")"
L_BRACE: "{"
R_BRACE: "}"
L_BRACE_LITERAL: "\\{"
R_BRACE_LITERAL: "\\}"
L_BRACKET: "["
R_BRACKET: "]"

CMD_TIMES: "\\times"
CMD_CDOT: "\\cdot"
CMD_DIV: "\\div"
CMD_FRAC: "\\frac"
        | "\\dfrac"
        | "\\tfrac"
CMD_BINOM: "\\binom"
CMD_DBINOM: "\\dbinom"
CMD_TBINOM: "\\tbinom"


set_constant: set_empty 
             | SET_BASIC


// from common.lark:
// LETTER
letter: upper_letter | lower_letter
upper_letter: "A".."Z"
lower_letter: "a".."z"

// SIGNED_NUMBER
signed_number: ["+"|"-"] number 
number: float | integer 
float: integer _exp | decimal _exp?
_exp: ("e"|"E") signed_int
signed_int: ["+"|"-"] integer
decimal: integer "." integer? | "." integer

// INT
integer: digit+
digit: "0".."9"




%ignore WS
%ignore NEWLINE
%import common (WS, NEWLINE)
%import .sets (SET_CSET_EMPTY, set_empty, SET_BASIC, SETARB_OPERATOR_BOOL, setset_operator_bool, set_operator_set, op_to_set_pow, SET_FAT)
%import .functions.FUNC_NORMAL